// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/models/conversation.dart';
import 'data/models/message.dart';
import 'data/models/textbook_chunk.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 2859567751538602466),
    name: 'Conversation',
    lastPropertyId: const obx_int.IdUid(5, 4340130636034114408),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 230111692254382996),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6021239327271678907),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 9100938233214325982),
        name: 'modelName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 481784479049116399),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 4340130636034114408),
        name: 'updatedAt',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(1, 182705571228144616),
        name: 'messages',
        targetId: const obx_int.IdUid(2, 7811330226467369996),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 7811330226467369996),
    name: 'Message',
    lastPropertyId: const obx_int.IdUid(7, 4162221759496699993),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3998325206162957746),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5045653068960368309),
        name: 'content',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6352108399457732754),
        name: 'isFromUser',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8565086619627863229),
        name: 'timestamp',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7745671393580022296),
        name: 'tokenCount',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 3269032827426521914),
        name: 'processingTimeMs',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 4162221759496699993),
        name: 'conversationId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 4996681417945844010),
        relationTarget: 'Conversation',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 7523831524193991030),
    name: 'TextbookChunk',
    lastPropertyId: const obx_int.IdUid(3, 4085045449275457039),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 214063676550671391),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7625807644409208997),
        name: 'text',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4085045449275457039),
        name: 'embedding',
        type: 28,
        flags: 8,
        indexId: const obx_int.IdUid(2, 560090793809498597),
        hnswParams: obx_int.ModelHnswParams(dimensions: 10),
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(3, 7523831524193991030),
    lastIndexId: const obx_int.IdUid(2, 560090793809498597),
    lastRelationId: const obx_int.IdUid(1, 182705571228144616),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Conversation: obx_int.EntityDefinition<Conversation>(
      model: _entities[0],
      toOneRelations: (Conversation object) => [],
      toManyRelations: (Conversation object) => {
        obx_int.RelInfo<Conversation>.toMany(1, object.id): object.messages,
      },
      getId: (Conversation object) => object.id,
      setId: (Conversation object, int id) {
        object.id = id;
      },
      objectToFB: (Conversation object, fb.Builder fbb) {
        final titleOffset = fbb.writeString(object.title);
        final modelNameOffset = fbb.writeString(object.modelName);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, titleOffset);
        fbb.addOffset(2, modelNameOffset);
        fbb.addInt64(3, object.createdAt.millisecondsSinceEpoch);
        fbb.addInt64(4, object.updatedAt.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final modelNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
        );
        final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
        );
        final object = Conversation(
          title: titleParam,
          modelName: modelNameParam,
          createdAt: createdAtParam,
          updatedAt: updatedAtParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        obx_int.InternalToManyAccess.setRelInfo<Conversation>(
          object.messages,
          store,
          obx_int.RelInfo<Conversation>.toMany(1, object.id),
        );
        return object;
      },
    ),
    Message: obx_int.EntityDefinition<Message>(
      model: _entities[1],
      toOneRelations: (Message object) => [object.conversation],
      toManyRelations: (Message object) => {},
      getId: (Message object) => object.id,
      setId: (Message object, int id) {
        object.id = id;
      },
      objectToFB: (Message object, fb.Builder fbb) {
        final contentOffset = fbb.writeString(object.content);
        fbb.startTable(8);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, contentOffset);
        fbb.addBool(2, object.isFromUser);
        fbb.addInt64(3, object.timestamp.millisecondsSinceEpoch);
        fbb.addInt64(4, object.tokenCount);
        fbb.addInt64(5, object.processingTimeMs);
        fbb.addInt64(6, object.conversation.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final contentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final isFromUserParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          8,
          false,
        );
        final timestampParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
        );
        final tokenCountParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          12,
        );
        final processingTimeMsParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          14,
        );
        final object = Message(
          content: contentParam,
          isFromUser: isFromUserParam,
          timestamp: timestampParam,
          tokenCount: tokenCountParam,
          processingTimeMs: processingTimeMsParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.conversation.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          16,
          0,
        );
        object.conversation.attach(store);
        return object;
      },
    ),
    TextbookChunk: obx_int.EntityDefinition<TextbookChunk>(
      model: _entities[2],
      toOneRelations: (TextbookChunk object) => [],
      toManyRelations: (TextbookChunk object) => {},
      getId: (TextbookChunk object) => object.id,
      setId: (TextbookChunk object, int id) {
        object.id = id;
      },
      objectToFB: (TextbookChunk object, fb.Builder fbb) {
        final textOffset = fbb.writeString(object.text);
        final embeddingOffset = fbb.writeListFloat32(object.embedding);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, textOffset);
        fbb.addOffset(2, embeddingOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final textParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final embeddingParam = const fb.ListReader<double>(
          fb.Float32Reader(),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 8, []);
        final object = TextbookChunk(text: textParam, embedding: embeddingParam)
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Conversation] entity fields to define ObjectBox queries.
class Conversation_ {
  /// See [Conversation.id].
  static final id = obx.QueryIntegerProperty<Conversation>(
    _entities[0].properties[0],
  );

  /// See [Conversation.title].
  static final title = obx.QueryStringProperty<Conversation>(
    _entities[0].properties[1],
  );

  /// See [Conversation.modelName].
  static final modelName = obx.QueryStringProperty<Conversation>(
    _entities[0].properties[2],
  );

  /// See [Conversation.createdAt].
  static final createdAt = obx.QueryDateProperty<Conversation>(
    _entities[0].properties[3],
  );

  /// See [Conversation.updatedAt].
  static final updatedAt = obx.QueryDateProperty<Conversation>(
    _entities[0].properties[4],
  );

  /// see [Conversation.messages]
  static final messages = obx.QueryRelationToMany<Conversation, Message>(
    _entities[0].relations[0],
  );
}

/// [Message] entity fields to define ObjectBox queries.
class Message_ {
  /// See [Message.id].
  static final id = obx.QueryIntegerProperty<Message>(
    _entities[1].properties[0],
  );

  /// See [Message.content].
  static final content = obx.QueryStringProperty<Message>(
    _entities[1].properties[1],
  );

  /// See [Message.isFromUser].
  static final isFromUser = obx.QueryBooleanProperty<Message>(
    _entities[1].properties[2],
  );

  /// See [Message.timestamp].
  static final timestamp = obx.QueryDateProperty<Message>(
    _entities[1].properties[3],
  );

  /// See [Message.tokenCount].
  static final tokenCount = obx.QueryIntegerProperty<Message>(
    _entities[1].properties[4],
  );

  /// See [Message.processingTimeMs].
  static final processingTimeMs = obx.QueryIntegerProperty<Message>(
    _entities[1].properties[5],
  );

  /// See [Message.conversation].
  static final conversation = obx.QueryRelationToOne<Message, Conversation>(
    _entities[1].properties[6],
  );
}

/// [TextbookChunk] entity fields to define ObjectBox queries.
class TextbookChunk_ {
  /// See [TextbookChunk.id].
  static final id = obx.QueryIntegerProperty<TextbookChunk>(
    _entities[2].properties[0],
  );

  /// See [TextbookChunk.text].
  static final text = obx.QueryStringProperty<TextbookChunk>(
    _entities[2].properties[1],
  );

  /// See [TextbookChunk.embedding].
  static final embedding = obx.QueryHnswProperty<TextbookChunk>(
    _entities[2].properties[2],
  );
}
